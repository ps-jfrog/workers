# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: "JF-CLI: Workers"
on: push
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  security-events: write # Required for uploading code scanning.
env:
  JF_RT_URL: "https://${{vars.JF_NAME}}.jfrog.io"
  RT_REPO_VIRTUAL: "workers-npm-virtual"
  RT_REPO_DEFAULT_LOCAL: "workers-npm-snapshot-local"
  RT_REPO_DEV_LOCAL: "workers-npm-dev-local"
  RT_REPO_QA_LOCAL: "workers-npm-qa-local"
  RT_REPO_PROD_LOCAL: "workers-npm-prod-local"
  BUILD_ID: "ga-${{github.run_number}}"
jobs:
  sbomCompareWithPreviousBuild:
    name: "SBOM Compare With Previous Build"
    runs-on: ubuntu-latest
    env:  
      BUILD_NAME: "sbom-compare-with-previous-build"
    defaults:
       run:
         working-directory: "${{github.workspace}}/AFTER_BUILD_INFO_SAVE/sbom-compare-with-previous-build"
    timeout-minutes: 30 
    steps:
      # Use the specific setup-cli branch. Ref https://github.com/marketplace/actions/setup-jfrog-cli
      - name: "Setup JFrog CLI"
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{env.JF_RT_URL}}
          JF_GIT_TOKEN: ${{secrets.GITHUB_TOKEN}}
          JFROG_CLI_LOG_LEVEL: "DEBUG"
        with:
          version: latest  
          oidc-provider-name: ${{vars.JF_OIDC_PROVIDER_NAME}}

      - name: "Clone VCS"
        uses: actions/checkout@v4 # ref: https://github.com/actions/checkout

      - name: "Config JF-CLI"
        run: |
          pwd
          jf npmc --global --repo-resolve ${{ env.RT_REPO_VIRTUAL}} --repo-deploy ${{ env.RT_REPO_VIRTUAL}} 
          jf npm cache clean --force
          tree .

      - name: "Software version"
        continue-on-error: true
        run: |
          # JFrog CLI version
          jf --version
          # Ping the server
          jf rt ping
          # NodeJS
          node -v
          npm -v
          # jf config
          jf config show

      - name: "NPM TypeScript: Prestep Summary "
        continue-on-error: true
        run: |
          echo "# :frog: NPM Prestep Summary :pushpin:" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " - Installed JFrog CLI [${jfcliv}](https://jfrog.com/getcli/) and [Node ${nodeVer} and NPM ${npmVer}](https://github.com/actions/setup-node) " >> $GITHUB_STEP_SUMMARY
          echo " - $(jf --version) " >> $GITHUB_STEP_SUMMARY
          echo " - Node $(node -v) " >> $GITHUB_STEP_SUMMARY
          echo " - NPM $(npm -v) " >> $GITHUB_STEP_SUMMARY
          echo " - Configured the JFrog Cli with ${{env.JF_RT_URL}} SaaS Artifactory OIDC integration: ${{ vars.JF_OIDC_PROVIDER_NAME }} " >> $GITHUB_STEP_SUMMARY
          echo " - Variables info" >> $GITHUB_STEP_SUMMARY
          echo "    - Build Name: ${{env.BUILD_NAME}} " >> $GITHUB_STEP_SUMMARY
          echo "    - ID: ${{env.BUILD_ID}} " >> $GITHUB_STEP_SUMMARY
          echo "    - Repo URL: ${{env.RT_REPO_VIRTUAL}}" >> $GITHUB_STEP_SUMMARY
          echo " - Worker event deployed and edit link is [${{env.JF_RT_URL}}/ui/admin/workers/${{env.BUILD_NAME}}/edit](${{env.JF_RT_URL}}/ui/admin/workers/${{env.BUILD_NAME}}/edit)" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY

      # Package
      - name: "Curation: audit" 
        timeout-minutes: 15   
        continue-on-error: true  
        run: |
          jf ca --format=table --threads=100

      - name: "Xray & JAS: Audit" 
        timeout-minutes: 15 
        continue-on-error: true 
        run: |
          jf audit --npm --sast=true --sca=true --secrets=true --licenses=true --validate-secrets=true --vuln=true --format=table --extended-table=true --threads=100 --fail=false

      - name: "Package: npm Build"  
        continue-on-error: false
        run: |
            jf npm install --build-name=${{ env.BUILD_NAME}} --build-number=${{ env.BUILD_ID}} 
  
      - name: "Xray: npm Artifact scan"
        timeout-minutes: 15  
        continue-on-error: true    
        run: |
          jf scan . --format=table --extended-table=true --threads=100 --fail=false

      - name: "Package: npm publish"
        continue-on-error: false
        run: |
          jf npm publish --build-name=${{ env.BUILD_NAME}} --build-number=${{ env.BUILD_ID}} 

      - name: "Worker: list current workers on ${{env.JF_RT_URL}}"
        timeout-minutes: 15  
        continue-on-error: false    
        run: |
          jf worker ls

      - name: "Worker: undeploy"
        timeout-minutes: 15  
        continue-on-error: false    
        run: |
          jf worker rm ${{env.WORKER_NAME}} 
          jf worker ls
          
      - name: "Worker: deploy"
        timeout-minutes: 15  
        continue-on-error: false    
        run: |
          jf worker deploy 
          jf worker ls

      - name: "BCE: Collect env"
        continue-on-error: true
        run: jf rt bce ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} 
  
      - name: "BAG: Add VCS info"
        continue-on-error: true
        run: jf rt bag ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} 

      - name: "BP: Build Publish"   
        continue-on-error: false
        run: jf rt bp ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} --detailed-summary=true
      
